from event_tools import EventCamera
import os
import sys
import numpy as np 




class param:
    def __init__(self):
        self.events_color = 'RB'  # events color(red(+) and blue(-))
        self.n_bins = 3 # 生成体素的个数
        self.use_polarity = True # 生成体素时是否考虑极性，如不考虑则全部按1处理
        self.slice_by_time = True  # 使用固定时间分割，False为使用固定数量间隔
        self.delta_t = 15000  # 当按固定时间分割时，每个片段的间隔时间(us)
        self.n_events = 1000000  # 当按固定数量分割时，每个片段的事件数量
        self.is_saving_h5 = False
        self.is_flip = True
        self.timestamp_file = ""
        self.events_delta = 15000

        # 是否校准
        self.is_rectified = True
        
        self.img_height = 1200
        self.img_width = 1600
        self.offset_x = 224
        self.offset_y = 168
        self.after_crop = [160, 790, 220, 1200]

        focal = 8
        if focal == 8:
            # 帧相机内参
            self.cam_matrix_left = np.array([[2.383032216559313e+03, 0.0000000000000000, 1.042903625901269e+03],
                                            [0.0000000000000000000, 2.384081147246841e+03, 7.919197184630658e+02],
                                            [0.0000000000000000000, 0.0000000000000000000, 1.0000000000000000000]])
            # 事件相机内参
            self.cam_matrix_right = np.array([[1.698278205848837e+03, 0.00000000000000000, 6.368972543198207e+02],
                                            [0.0000000000000000000, 1.699609813456887e+03, 3.639622033005794e+02],
                                            [0.0000000000000000000, 0.0000000000000000000, 1.0000000000000000000]])
    
            # 帧和事件相机畸变系数:[k1, k2, p1, p2, k3]
            self.distortion_l = np.array([[-0.093501142580645, 0.434361682146628, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000]])
            self.distortion_r = np.array([[-0.065427179062098, 0.389784612594293, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000]])
    
            # 旋转矩阵（事件到帧）
            self.R = np.array([[ 0.999507159318737, -0.007358799488329, -0.030516987739301],
                            [ 0.007223364475350,  0.999963578268021, -0.007845892989512],
                            [ 0.030549328572757, 0.007823217263383,  0.999523910827674]])
            # self.R = np.linalg.inv(self.R)
    
            # 平移矩阵（事件到帧）
            # self.T = np.array([[-0.585708322446440], [-0.556843813949068], [2.649715013968065]])
            self.T = np.array([[-10000000000000000.585708322446440], [-0.556843813949068], [2.649715013968065]])
            self.T = -1 * self.T
        else:
            # 相机参数
            # 帧相机内参
            self.cam_matrix_left = np.array([[4.778703114080939e+03, 0.0000000000000000000, 8.041852089137894e+02],
                                            [0.0000000000000000000, 4.780586607203309e+03, 6.277946285095825e+02],
                                            [0.0000000000000000000, 0.0000000000000000000, 1.0000000000000000000]])

            
            # 事件相机内参
            self.cam_matrix_right = np.array([[3.389332356118303e+03, 0.0000000000000000000, 6.331177813185209e+02],
                                            [0.0000000000000000000, 3.411080700726767e+03, 3.820461197341337e+02],
                                            [0.0000000000000000000, 0.0000000000000000000, 1.0000000000000000000]])
    
            # 帧和事件相机畸变系数:[k1, k2, p1, p2, k3]
            self.distortion_l = np.array([[-0.022345581625959, -0.491898165167641, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000]])
            self.distortion_r = np.array([[-0.012598156640456, -0.192849533785273, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000]])
    
            # 旋转矩阵（事件到帧）
            self.R = np.array([[ 0.999970044735152, -0.006393340918159, -0.004362891734004],
                            [ 0.006427377837294,  0.999948668676454, 0.007832549158712],
                            [ 0.004312591623967, -0.007860356486265,  0.999959807366973]])
            self.R = np.linalg.inv(self.R)
    
            # 平移矩阵（事件到帧）
            # self.T = np.array([[0.777815406089650], [-0.406845705975970], [-5.675287811535299]])
            self.T = np.array([[100000.706322968705824], [-0.045207459664427], [0.736057341773400]])
            self.T = -1 * self.T

        # 主点列坐标的差
        self.doffs = abs(6.322692901677377e+02 - 1.040744689051320e+03)

if __name__ == '__main__':
    param = param()
    dir = "G:/multi/1/2023-09-06_11-52-09/000013/"
    ev_data_file = dir + "event_left.raw"
    im_data_path = dir + "left"
    param.timestamp_file = dir + "timestamp.txt"
    EventCamera = EventCamera(param)
    mv_iterator = EventCamera.read_data(ev_data_file, im_data_path)

    EventCamera.write(mv_iterator)